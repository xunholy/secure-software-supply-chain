---
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: build

on:
  push:
    branches:
      - master
      - main
    paths:
      - .github/workflows/build.yaml
      - ./src/
      - Dockerfile

permissions:
  id-token: write
  attestations: write
  contents: write
  packages: write

env:
  REGISTRY: ghcr.io

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4

      - name: Install Go
        uses: actions/setup-go@cdcb36043654635271a94b9a6d1392de5bb323a7 # v5
        with:
          go-version: '1.22'
          cache: false

      - name: Install Go Modules
        working-directory: src
        run: go mod tidy

      - name: Run tests
        working-directory: src
        run: go test -v ./...

      - name: Generate Source SBOM
        uses: anchore/sbom-action@e8d2a6937ecead383dfe75190d104edd1f9c5751 # v0
        with:
          path: ./src/
          format: 'spdx-json'
          output-file: 'source.sbom.spdx.json'
          artifact-name: 'source.sbom.spdx.json'

      - name: Scan Source SBOM
        uses: anchore/scan-action@3343887d815d7b07465f6fdcd395bd66508d486a # v3
        with:
          output-format: table
          fail-build: true
          severity-cutoff: critical
          sbom: "source.sbom.spdx.json"

      - name: Display Source SBOM
        run: cat source.sbom.spdx.json

      - name: Build Package Binary
        working-directory: src
        run: go build -v -o example ./...

      - name: Generate Source SBOM Attestation
        uses: actions/attest-sbom@3d6693daad97553949201f0913efcba833e58d67 # v1
        with:
          subject-path: './src/example'
          sbom-path: 'source.sbom.spdx.json'

      - name: Generate Package SBOM
        uses: anchore/sbom-action@e8d2a6937ecead383dfe75190d104edd1f9c5751 # v0
        with:
          file: ./src/example
          format: 'spdx-json'
          output-file: 'package.sbom.spdx.json'
          artifact-name: 'package.sbom.spdx.json'

      - name: Scan Package SBOM
        uses: anchore/scan-action@3343887d815d7b07465f6fdcd395bd66508d486a # v3
        with:
          output-format: table
          fail-build: true
          severity-cutoff: critical
          sbom: "package.sbom.spdx.json"

      - name: Display Package SBOM
        run: cat package.sbom.spdx.json

      - name: Generate Package SBOM Attestation
        uses: actions/attest-sbom@3d6693daad97553949201f0913efcba833e58d67 # v1
        with:
          subject-path: './src/example'
          sbom-path: 'package.sbom.spdx.json'

      - name: Generate Package Binary Attestation
        uses: actions/attest-build-provenance@bdd51370e0416ac948727f861e03c2f05d32d78e # v1
        with:
          subject-path: './src/example'

      - name: Verify Package Attestations
        working-directory: src
        run: gh attestation verify ./example -R ${{ github.repository }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Package Artifact
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4
        with:
          name: example
          path: ./src

  package:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4

      - name: Install Task
        run: sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b ~/.local/bin

      - name: Collect Metadata
        id: info
        run: task info

      - name: Set up QEMU
        uses: docker/setup-qemu-action@68827325e0b33c7199eb31dd4e31fbe9023e06e3 # v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb # v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push
        uses: docker/build-push-action@15560696de535e4014efeff63c48f16952e52dd1 # v6
        id: build-image
        with:
          build-args: |
            VERSION=${{ steps.info.outputs.version }}
            SHA=${{ github.sha }}
          context: ./src
          file: Dockerfile
          platforms: linux/amd64
          attests: type=sbom
          provenance: true
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository }}/example:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ github.repository }}/example:latest

      - name: Generate Image SBOM
        uses: anchore/sbom-action@e8d2a6937ecead383dfe75190d104edd1f9c5751 # v0
        with:
          image: ${{ env.REGISTRY }}/${{ github.repository }}/example:${{ github.sha }}
          format: 'spdx-json'
          output-file: 'image.sbom.spdx.json'
          artifact-name: 'image.sbom.spdx.json'

      - name: Scan Image SBOM
        uses: anchore/scan-action@3343887d815d7b07465f6fdcd395bd66508d486a # v3
        with:
          output-format: table
          fail-build: true
          severity-cutoff: critical
          sbom: "image.sbom.spdx.json"

      - name: Display Image SBOM
        run: cat image.sbom.spdx.json

      - name: Generate Image SBOM Attestation
        uses: actions/attest-sbom@3d6693daad97553949201f0913efcba833e58d67 # v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ github.repository }}/example
          subject-digest: ${{ steps.build-image.outputs.digest }}
          sbom-path: 'image.sbom.spdx.json'
          push-to-registry: true

      - name: Generate Image Attestation
        uses: actions/attest-build-provenance@bdd51370e0416ac948727f861e03c2f05d32d78e # v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ github.repository }}/example
          subject-digest:  ${{ steps.build-image.outputs.digest }}
          push-to-registry: true

      - name: Verify Image Attestations
        run: gh attestation verify oci://${{ env.REGISTRY }}/${{ github.repository }}/example@${{ steps.build-image.outputs.digest }} -R ${{ github.repository }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
